char* largestOddNumber(char* num) {
    int i = strlen(num) - 1;
    for(  ; i > -1 && !((num[i] - '0') & 1); i--);
    num[i+1] = '\0';
    return (i == -1) ? "" : num;
}


--------------------------------------------------------------------------------------------------------------------------------------------------------------------


char * largestOddNumber(char * num){
    int n = strlen(num) , i = 0;
    while((n-1-i) >= 0)
    {
        if((num[n-i-1]-'0') % 2)
        {
            num[n-i]='\0';
            return num;
        }
        i++;
    }
    return "";
}


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------


char * largestOddNumber(char * num){    
    int len = strlen(num);
    if(((num[len-1] - '0') % 2) == 1)
        return num;
    int i;
    for( i = len - 1 ; i >= 0 ; i--)
        if(((num[i] - '0')% 2) == 1)
            break;
    if(i == -1)
        return "";
    char *arr = malloc((i+2)*sizeof(char));
    for(int j = i ; j >= 0 ; j--)
        arr[j] = num[j];
    arr[i+1] = '\0';
    return arr;
}
